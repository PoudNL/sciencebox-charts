{{- $directoryTreePrefix := default "/eos/user" .Values.config.directoryTree.prefix -}}
{{- $createUsers := .Values.config.demoUsers.createUsers -}}
{{- $createHomeDirs := .Values.config.demoUsers.createHomeDirs -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "eos-instance-config.fullname" . }}-script
  labels:
    {{- include "eos-instance-config.labels" . | nindent 4 }}
data:
  instance_config.sh: |
    #!/bin/bash
    set -x
    alias eos='eos -r 0 0'
    shopt -s expand_aliases

    init_probe() {
      local cmd=$@
      local max_wait=60
      local sleep=5
      start_time=$(date +%s)
      rc=-1
      while [ $rc -ne 0 ];
      do
        timeout --preserve-status $sleep $cmd >/dev/null 2>&1
        rc=$?

        # Bail out after max_wait
        tot_wait=$(($(date +%s)-start_time))
        echo "        $tot_wait seconds... (timeout at $max_wait)"
        if [ $tot_wait -ge $max_wait ]; then
          echo "ERROR: cmd \`$cmd\` failed after $tot_wait secs. Giving up."
          exit 1
        fi
        sleep $sleep
      done
    }

    # Wait for the MGM to be online
    echo "INFO: Checking the MGM is online..."
    echo "INFO: EOS_MGM_URL="$EOS_MGM_URL
    init_probe eos ns
    echo "INFO: MGM is online."

    # Check if a previous configuration already exists. If so, don't touch.
    echo "INFO: Looking for previous EOS configurations..."
    if [ $(eos config ls | grep -w 'sciencebox_bootstrap' | wc -l) -eq 1 ]; then
      echo "  ✓ EOS configurations found. Exiting."
      exit 0
    fi
    echo "  ✓ None found. Configuring..."


    ## Space
    echo "INFO: Configuring space..."

    {{- with .Values.config.spaceDefault }}
    echo "INFO: Defining space spare..."
    eos space define spare

    echo "INFO: Defining space default..."
    {{- if .groupSize }}
    {{- if .groupMod }}
    eos space define default {{ .groupSize }} {{ .groupMod }}
    {{- else }}
    eos space define default {{ .groupSize }}
    {{- end }}
    {{- else }}
    eos space define default
    {{- end }}
    {{- end }}
    echo "INFO: Activating space default..."
    eos space set default on


    ## OAuth2
    {{- if .Values.config.oauth.enabled }}
    {{- $audience_claim := "" }}
    {{- if .Values.config.oauth.audienceClaim }}
      {{- $audience_claim = (printf "@%s" .Values.config.oauth.audienceClaim) }}
    {{- end }}
    eos vid enable oauth2
    eos vid set map -oauth2 key:{{ required "The OAuth resource enpoint is required" .Values.config.oauth.resourceEndpoint }}{{ $audience_claim }} vuid:0
    {{- end }}


    ## System Attributes
    echo "INFO: Configuring system attributes..."
    {{- range $attribute,$value := .Values.config.sys }}
    eos attr -r set sys.{{ $attribute }}={{ $value }} /eos
    {{- end }}
    {{- range $attribute,$value := .Values.config.sysForced }}
    eos attr -r set sys.forced.{{ $attribute }}={{ $value }} /eos
    {{- end }}


    ## EOS root ownership and mode
    # eos chmod 2755 /eos


    ## Recycle bin
    echo "INFO: Configuring recycle bin..."
    {{- with .Values.config.recycle }}
    {{- if .enable }}
    {{- range $param,$value := .params }}
    eos recycle config --{{ $param }} {{ $value }}
    {{- end }}
    {{- end }}
    {{- end }}
    # eos chmod 3711 {{ $directoryTreePrefix }}/proc/recycle


    ## EOS directory tree
    echo "INFO: Configuring directory tree..."
    {{- with .Values.config.directoryTree }}
    {{- if .create }}
    eos mkdir -p {{ $directoryTreePrefix }}
    #eos attr set sys.mask="700" {{ $directoryTreePrefix }}
    #eos attr set sys.owner.auth="*" {{ $directoryTreePrefix }}
    for letter in {a..z}
    do
      eos mkdir -p {{ $directoryTreePrefix }}/$letter
    done
    {{- end }}
    {{- end }}


    ## EOS demo users
    create_eos_homedir () {
      if [ $# -lt 3 ]; then
        echo "ERR: Unable to create homedir: Wrong number of parameters."
        return
      fi

      local homedir=$1
      local uid=$2
      local gid=$3

      eos mkdir -p $homedir
      eos chown $uid:$gid $homedir
      eos chmod 2700 $homedir
      eos attr set sys.acl=u:$uid:rwx $homedir
      eos attr set sys.mask="700" $homedir
      eos attr set sys.allow.oc.sync="1" $homedir
      eos attr set sys.mtime.propagation="1" $homedir
      eos attr set sys.forced.atomic="1" $homedir
      eos attr set sys.versioning="10" $homedir
      ###
      # TODO: `error: you cannot set quota from storage node with 'sss' authentication!`
      #eos quota set -u $uid -v {{ default "1T" .Values.config.demoUsers.quota.size }} -i {{ default "1M" .Values.config.demoUsers.quota.inodes }} -p {{ $directoryTreePrefix }}
      ###
      eos access allow user $uid
      sleep 3
    }

    echo "INFO: Configuring demo users..."
    {{- with .Values.config.demoUsers }}

    {{- if .userList }}
    echo "INFO:   Users from list..."
    {{- range $user, $properties := .userList }}
    {{- if $createUsers }}
    # TODO: We should rather create the user/group on the IDP/LDAP side.
    #       Not implemented at the moment.
    {{- end }}
    {{- if $createHomeDirs }}
    uname={{ $user }}
    uname_initial=$(echo $uname | cut -c 1)
    homedir={{ $directoryTreePrefix }}/$uname_initial/$uname
    create_eos_homedir $homedir {{ $properties.uid }} {{ $properties.gid }}
    {{- end }}
    {{- end }}
    {{- end }}

    {{- if .userBlock }}
    echo "INFO:   Users in bulk..."
    gid={{ default "1000" .userBlock.gid }}
    {{- if $createUsers }}
    gname={{ default "users" .userBlock.gname }}
    #groupadd --force --gid $gid $gname
    #  This adds the group to the local container, which is useless.
    #  We should rather create the group on the IDP/LDAP side; Not implemented at the moment.
    {{- end }}
    uid_start={{ default 1000 .userBlock.uidStart }}
    uname_prefix={{ default "user" .userBlock.unamePrefix }}
    uname_initial=$(echo $uname_prefix | cut -c 1)
    for i in $(seq {{ default 10 .userBlock.howMany }})
    do
      i=$(($i-1))  # Start from 0
      uid=$(echo $uid_start + $i | bc -l)
      uname="$uname_prefix$i"
      {{- if $createUsers }}
      #useradd --no-create-home --no-user-group --uid $uid $uname || true
      #  This adds the group to the local container, which is useless.
      #  We should rather create the group on the IDP/LDAP side; Not implemented at the moment.
      {{- end }}
      {{- if $createHomeDirs }}
      homedir={{ $directoryTreePrefix }}/$uname_initial/$uname
      create_eos_homedir $homedir $uid $gid
      {{- end }}
    done
    {{- end }}
    {{- end }}


    ### Save config and leave
    echo "INFO: Saving configuration..."
    eos config save sciencebox_bootstrap -f
    eos config save default -f

    exit 0

