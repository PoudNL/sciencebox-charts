#
# ScienceBox
#
sciencebox:
  # sss keytab for eos
  #   Will be used by eos server ('eos:' section) and fusex ('swan:fusex:' section).
  #   Options:
  #     - createSecret: Create a secret either from file or from value.
  #         If set to false, no secrets will be automatically generated. In this case, secretName must
  #         be set to an existing secret containering the sss keytab
  #     - secretName: Name of the secret containing the sss keytab
  #     - fromFile: Provide the path to a file containing the eos keytab (defaults to files/eos.keytab)
  #         A secret with name <secretName> will be created from it
  #     - fromValue: Provide the full keytab as a string
  #         Example: "0 u:daemon g:daemon n:eos-test+ N:69275826269580...
  #         A secret with name <secretName> will be created from it
  sssKeytab:
    createSecret: true
    secretName: &sssKeytabName sciencebox-eos-sss-keytab
    fromFile: files/eos.keytab
    #fromValue:

#
# Global values
#
global:
  #
  # EOS image tag:
  #   - Used by eos-server (qdb, mq, mgm, fst) (eos-all image)
  #             eos-instance-config (eos-all image)
  #             fusex in SWAN (eos-fusex image)
  ## tag: 4.8.80
  #    As of now we are using 4.8.80 for all but fusex, which uses 4.8.62 (due to OAuth issue)
  #
  # SSS keytab:
  #   - Anchor from sciencebox:sssKeytab
  #   - Used by eos-server (qdb, mq, mgm, fst) and eos-instance-config
  sssKeytab:
    secret: *sssKeytabName


#
# LDAP -- OpenLDAP
#
#
#   The LDAP server chart
ldap:
  image:
    repository: &ldapImageRepo osixia/openldap
    tag: &ldapImageTag 1.5.0
  replicaCount: 1
  replication:
    enabled: false
  persistence:
    enabled: false
  adminPassword: admin
  configPassword: config
  env:
    LDAP_ORGANISATION: ownCloud
    LDAP_DOMAIN: owncloud.com
    LDAP_BASE_DN: dc=owncloud,dc=com
    LDAP_READONLY_USER: "true"
    LDAP_READONLY_USER_USERNAME: readuser
    LDAP_READONLY_USER_PASSWORD: readuser
    LDAP_TLS_VERIFY_CLIENT: try
    LDAP_RFC2307BIS_SCHEMA: "true"
    LDAP_REMOVE_CONFIG_AFTER_SETUP: "false"
  customLdifFiles:
    readme.warning: |-
      #
      # WARNING:
      #   The customLdifFiles implementation for users and groups in osixia/openldap is buggy.
      #
      # See comment at https://github.com/osixia/docker-openldap/issues/547#issuecomment-805686473
      # ... and open issues upstream:
      #   - https://github.com/osixia/docker-openldap/issues/320
      #   - https://github.com/osixia/docker-openldap/issues/433
      #   - https://github.com/osixia/docker-openldap/issues/538
      #
      # Please, don't waste your time further until the upstream container // chart have been fixed.
      #

  phpldapadmin:
    enabled: false
    ingress:
      enabled: false

  ltb-passwd:
    enabled: false
    ingress:
      enabled: false
#
# The ldap-instance-config chart to populare the LDAP server with custom users and groups.
ldap-instance-config:
  image:
    repository: *ldapImageRepo
    tag: *ldapImageTag
  # TODO: The following params should be guessed:
  protocol: ldap
  hostname: sciencebox-ldap
  port: 389
  bindDn: cn=admin,dc=owncloud,dc=com
  bindPassword: admin
  ldifFiles:
    # As per https://github.com/owncloud/ocis/tree/master/deployments/examples/ocis_ldap/config/ldap/ldif
    users.ldif: |-
      dn: ou=users,dc=owncloud,dc=com
      objectClass: organizationalUnit
      ou: users

      # Start dn with uid (user identifier / login), not cn (Firstname + Surname)
      dn: uid=einstein,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: einstein
      givenName: Albert
      sn: Einstein
      cn: einstein
      displayName: Albert Einstein
      description: A German-born theoretical physicist who developed the theory of relativity, one of the two pillars of modern physics (alongside quantum mechanics).
      mail: einstein@example.org
      uidNumber: 20000
      gidNumber: 30000
      homeDirectory: /home/einstein
      ownCloudUUID:: NGM1MTBhZGEtYzg2Yi00ODE1LTg4MjAtNDJjZGY4MmMzZDUx
      userPassword:: e1NTSEF9TXJEcXpFNGdKbXZxbVRVTGhvWEZ1VzJBbkV3NWFLK3J3WTIvbHc9PQ==

      dn: uid=marie,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: marie
      givenName: Marie
      sn: Curie
      cn: marie
      displayName: Marie Sk≈Çodowska Curie
      description: A Polish and naturalized-French physicist and chemist who conducted pioneering research on radioactivity.
      mail: marie@example.org
      uidNumber: 20001
      gidNumber: 30000
      homeDirectory: /home/marie
      ownCloudUUID:: ZjdmYmY4YzgtMTM5Yi00Mzc2LWIzMDctY2YwYThjMmQwZDlj
      userPassword:: e1NTSEF9UmFvQWs3TU9jRHBIUWY3bXN3MGhHNnVraFZQWnRIRlhOSUNNZEE9PQ==

      dn: uid=richard,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: richard
      givenName: Richard
      sn: Feynman
      cn: richard
      displayName: Richard Phillips Feynman
      description: An American theoretical physicist, known for his work in the path integral formulation of quantum mechanics, the theory of quantum electrodynamics, the physics of the superfluidity of supercooled liquid helium, as well as his work in particle physics for which he proposed the parton model.
      mail: richard@example.org
      uidNumber: 20002
      gidNumber: 30000
      homeDirectory: /home/richard
      ownCloudUUID:: OTMyYjQ1NDAtOGQxNi00ODFlLThlZjQtNTg4ZTRiNmIxNTFj
      userPassword:: e1NTSEF9Z05LZTRreHdmOGRUREY5eHlhSmpySTZ3MGxSVUM1d1RGcWROTVE9PQ==

      dn: uid=moss,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: moss
      givenName: Maurice
      sn: Moss
      cn: moss
      displayName: Maurice Moss
      description: A worker in the IT Department of Reynholm Industries. Of all the working staff in the IT Department, he is the most hard-working, the most experienced, and the most capable of doing his job well. He puts a lot of effort into his work, however he does not get the credit he deserves.
      mail: moss@example.org
      uidNumber: 20003
      gidNumber: 30000
      homeDirectory: /home/moss
      ownCloudUUID:: MDU4YmZmOTUtNjcwOC00ZmU1LTkxZTQtOWVhM2QzNzc1ODhi
      userPassword:: e1NTSEF9N0hEdTRoMkFDVExFWWt4U0RtSDZVQjhmUlpKRExDZDc=

      dn: uid=admin,ou=users,dc=owncloud,dc=com
      objectClass: inetOrgPerson
      objectClass: organizationalPerson
      objectClass: ownCloud
      objectClass: person
      objectClass: posixAccount
      objectClass: top
      uid: admin
      givenName: Admin
      sn: Admin
      cn: admin
      displayName: Admin
      description: An admin for this oCIS instance.
      mail: admin@example.org
      uidNumber: 20004
      gidNumber: 30000
      homeDirectory: /home/admin
      ownCloudUUID:: ZGRjMjAwNGMtMDk3Ny0xMWViLTlkM2YtYTc5Mzg4OGNkMGY4
      userPassword:: e1NTSEF9UWhmaFB3dERydTUydURoWFFObDRMbzVIckI3TkI5Nmo=

    groups.ldif: |-
      dn: ou=groups,dc=owncloud,dc=com
      objectClass: organizationalUnit
      ou: groups

      dn: cn=users,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: users
      description: Users
      gidNumber: 30000
      ownCloudUUID:: NTA5YTlkY2QtYmIzNy00ZjRmLWEwMWEtMTlkY2EyN2Q5Y2Zh
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=moss,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=admin,ou=users,dc=owncloud,dc=com

      dn: cn=sailing-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: sailing-lovers
      description: Sailing lovers
      gidNumber: 30001
      ownCloudUUID:: NjA0MGFhMTctOWM2NC00ZmVmLTliZDAtNzcyMzRkNzFiYWQw
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com

      dn: cn=violin-haters,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: violin-haters
      description: Violin haters
      gidNumber: 30002
      ownCloudUUID:: ZGQ1OGU1ZWMtODQyZS00OThiLTg4MDAtNjFmMmVjNmY5MTFm
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com

      dn: cn=radium-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: radium-lovers
      description: Radium lovers
      gidNumber: 30003
      ownCloudUUID:: N2I4N2ZkNDktMjg2ZS00YTVmLWJhZmQtYzUzNWQ1ZGQ5OTdh
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com

      dn: cn=polonium-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: polonium-lovers
      description: Polonium lovers
      gidNumber: 30004
      ownCloudUUID:: Y2VkYzIxYWEtNDA3Mi00NjE0LTg2NzYtZmE5MTY1ZjU5OGZm
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com

      dn: cn=quantum-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: quantum-lovers
      description: Quantum lovers
      gidNumber: 30005
      ownCloudUUID:: YTE3MjYxMDgtMDFmOC00YzMwLTg4ZGYtMmIxYTlkMWNiYTFh
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com

      dn: cn=philosophy-haters,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: philosophy-haters
      description: Philosophy haters
      gidNumber: 30006
      ownCloudUUID:: MTY3Y2JlZTItMDUxOC00NTVhLWJmYjItMDMxZmUwNjIxZTVk
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com

      dn: cn=physics-lovers,ou=groups,dc=owncloud,dc=com
      objectClass: groupOfUniqueNames
      objectClass: posixGroup
      objectClass: ownCloud
      objectClass: top
      cn: physics-lovers
      description: Physics lovers
      gidNumber: 30007
      ownCloudUUID:: MjYyOTgyYzEtMjM2Mi00YWZhLWJmZGYtOGNiZmVmNjRhMDZl
      uniqueMember: uid=einstein,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=marie,ou=users,dc=owncloud,dc=com
      uniqueMember: uid=richard,ou=users,dc=owncloud,dc=com

#
# OCIS-IDP
#
ocis-idp:
  env:
    # Set access token expiration to 8hrs (=28800s) until the auto-renewal is fixed
    IDP_ACCESS_TOKEN_EXPIRATION: 28800
    IDP_ISS: https://idp.hostname
  configFiles:
    identifier_registration.yaml: |
      clients:
        - id: swan
          secret: 4a045535-6b99-49d3-bf41-8b410cd965a6
          name: SWAN
          application_type: native
  ingress:
    enabled: true
    hosts:
    exposeIdp: true

#
# EOS
#
#
#   The server chart (aliased to eos) with qdb, mgm, and fst
eos:
  mgm:
    extraEnv:
      EOS_MGM_OIDC_INSECURE: "true"
      EOS_MGM_OIDC_MAP_FIELD: "preferred_username"
    mgmofs:
      instance: user
    ldapBindUsers:
      enable: true
      nslcd:
       config:
         ldap_uri: ldap://sciencebox-ocis-idp.default.svc.cluster.local:9389
         ldap_base: ou=users,dc=example,dc=org
         ldap_binddn: cn=idp,ou=sysusers,dc=example,dc=org
         ldap_bindpw: idp
         ldap_user_search_base: dc=example,dc=org
         ldap_group_search_base: ou=groups,dc=example,dc=org
         ldap_filter_passwd: (objectClass=posixAccount)
         ldap_filter_group: (objectClass=group)
  fst:
    replicaCount: 4
#
#   The eos-instance-config chart to configure the instance for the ScienceBox needs
eos-instance-config:
  tag: 4.8.80
  config:
    demoUsers:
      userList:
        admin:
          uid: 20004
          gid: 30000
        einstein:
          uid: 20000
          gid: 30000
        marie:
          uid: 20001
          gid: 30000
        moss:
          uid: 20003
          gid: 30000
        reva:
          uid: 10001
          gid: 15000
        richard:
          uid: 20002
          gid: 30000


#
# SWAN
#
swan:
  #
  # CVMFS mounts
  cvmfs:
    deployDaemonSet: &cvmfsDeployDS true
    deployCsiDriver: &cvmfsDeployCSI false
    useCsiDriver: &cvmfsUseCSI false
    repositories: &cvmfsRepos
      - cvmfs-config.cern.ch
      - sft.cern.ch
      - sft-nightlies.cern.ch
  #
  # EOS Fusex mount
  eos:
    deployDaemonSet: &eosDeployDS true
    deployCsiDriver: &eosDeployCSI false
    useCsiDriver: &eosUseCSI false
  fusex:
    checkMgmOnline:
      enabled: true
      eosMgmUrlAuto: true
    fusex:
      keytab:
        secret: *sssKeytabName
      hostMountpoint: /var/eos
      config:
        oauth2: 1
        eos_mgm_alias: "sciencebox-mgm.default.svc.cluster.local"
  #
  # JupyterHub
  jupyterhub:
    proxy:
      secretToken: 11df35dab7527b3798de5224f06458db1e0526fa65700e81e18f17f89822e0cf
    hub:
      image:
        name: "gitlab-registry.cern.ch/sciencebox/hotfixes/jupyterhub"
        tag: "v1.18-20220314"
        pullPolicy: "Always"
      # The default (pvc) is not working in openstack...
      # TODO: Add some persistency here
      db:
        type: sqlite-memory
      extraEnv:
        JUPYTERHUB_CRYPT_KEY: 8b9fa8fc38c56eb4b3194d875924bb27062635b038b75ffbc91d9a6212bd3e55
      cookieSecret: 07006b4975f06166c988122e78603740788e93846265b0aec791c387a9a83925
      config:
        SwanKubeSpawner:
          local_home: False     # Use the homedir on EOS
        KeyCloakAuthenticator:
          oidc_issuer: https://idp.hostname
          client_id: swan
          client_secret: 4a045535-6b99-49d3-bf41-8b410cd965a6
          oauth_callback_url: https://sciencebox.hostname/swan/hub/oauth_callback
          tls_verify: false     # Accept self-signed/invalid certificate from OCIS IDP
          scope:
            - openid
            - email
            - profile
            - offline_access
          jwt_signing_algorithms:
            - HS256
            - RS256
            - PS256
          # With the CERN SSO we will get a valid token for EOS. If the eosxd supports oauth,
          # we will be able to use it from the terminal, even with local_home=True.
          # The oCIS idp probably doesn't support exchanging tokens, but we will be able to re-use
          # the swan token with EOS if needed (although we shouldn't)
          exchange_tokens:
          ##   - eos-service
          ##   - cernbox-service
        JupyterHub:
          # We should expose cernbox and swan from the same url to simplify the deployment
          # We can do that by using different base url's for each.
          # I hope this simplifies the ScienceBox ingress as well
          base_url: /swan
      extraConfig:
        # TODO change the config to use the oCIS idp
        # Might need fixes on the swan code cause we break if we don't set user_roles (at least when using GPU).
        00-authConf: |
          def pre_spawn_hook(authenticator, spawner, auth_state):
            spawner.environment['ACCESS_TOKEN'] = auth_state['access_token']
            spawner.environment['OAUTH_INSPECTION_ENDPOINT'] = authenticator.userdata_url.replace('https://', '')
            spawner.user_uid = str(1000) # Fake value -- Nobody uses this.
            decoded_token = authenticator._decode_token(auth_state['access_token'])
            spawner.user_roles = authenticator.claim_roles_key(authenticator, decoded_token)
          c.KeyCloakAuthenticator.pre_spawn_hook = pre_spawn_hook
        02-spawnError: |
          cernbox_url = 'CHANGE_ME' #TODO: This should come from the ScienceBox config !! If necessary, this can come as an env var

          SPAWN_ERROR_MESSAGE = f"""SWAN could not start a session for your user, please try again. If the problem persists, please check:
          <ul>
              <li>Do you have a CERNBox account? If not, click <a href="{cernbox_url}" target="_blank">here</a>.</li>
              <li>Check with the service manager that SWAN is running properly.</li>
          </ul>"""
          c.SpawnHandlersConfigs.spawn_error_message = SPAWN_ERROR_MESSAGE
        03-simpleForm: |
          # Remove this to enable the full form
          c.SwanSpawner.options_form = open('/srv/jupyterhub/jupyterhub_form.html').read()
    singleuser:
      cpu:
        limit: .5
        guarantee: .5
      extraEnv:
        # The sharing functionality won't work because we are deploying oCIS and not oc10
        # This will be replaced in the future with the CS3 APIs
        # SHARE_CBOX_API_DOMAIN: LOCAL_CBOX_URL__CHANGE_ME
        # SHARE_CBOX_API_BASE: /cernbox/swanapi/v1
        HELP_ENDPOINT: https://raw.githubusercontent.com/swan-cern/help/up2u/
        # FIXME Create a galery for ScienceBox? Or the normal one should redirect to different instances?
        # GALLERY_URL: https://swan-gallery.web.cern.ch/

    # TODO For some reason this is not working... We're still debugging
    prePuller:
      hook:
        enabled: false

    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        #nginx.ingress.kubernetes.io/rewrite-target: /
        #nginx.ingress.kubernetes.io/secure-backends: "true"
      hosts:
      # tls:
      #   - secretName: swan-tls-cert
      #     hosts:
      #       - test.mydomain
    custom:
      cvmfs:
        deployDaemonSet: *cvmfsDeployDS
        deployCsiDriver: *cvmfsDeployCSI
        useCsiDriver: *cvmfsUseCSI
        repositories: *cvmfsRepos
      eos:
        deployDaemonSet: *eosDeployDS
        deployCsiDriver: *eosDeployCSI
        useCsiDriver: *eosUseCSI


  # To decide if we keep this or we manage the tls secret differently
  # If we keep it, maybe should change the name from swan.secrets.ingress to smth else
  # swan:
  #   secrets:
  #     ingress:
  #       cert:
  #       key:

#
# NGINX
#   This is a simple nginx web server to provide a landing page to ScienceBox users.
#
nginx:
  ingress:
    enabled: false
  service:
    type: ClusterIP
  staticSiteConfigmap: sciencebox-landing-page-cfgmap

# values for revad-gateway service
gateway:
  image:
    repository: jimil749/revad
    tag: latest
  service:
    grpc:
      port: 9142
    http:
      port: 9143
  env:
    XrdSecPROTOCOL: unix
  configFiles:
    revad.toml:

# values for revad-storage provider home service
storageprovider-home:
  image:
    repository: jimil749/revad-eos
    tag: latest
  service:
    grpc:
      port: 18000
    http:
      port: 17000
  env:
    XrdSecPROTOCOL: unix
# values for revad-storage provider public service
storageprovider-public:
  image:
    repository: jimil749/revad
    tag: latest
  service:
    grpc:
      port: 9278
  env:
    XrdSecPROTOCOL: unix
# values for revad-storage provider user service
storageprovider-user:
  image:
    repository: jimil749/revad
    tag: latest
  service:
    grpc:
      port: 16000
    http:
      port: 15000
  env:
    XrdSecPROTOCOL: unix
# values for revad-auth provider machine service
authprovider-machine:
  image:
    repository: jimil749/revad-new
    tag: latest
  service:
    grpc:
      port: 9166
