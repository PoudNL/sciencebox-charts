#
# ScienceBox
#
sciencebox:
  # sss keytab for eos
  #   Will be used by eos server and fusex.
  #   Options:
  #     - createSecret: Create a secret either from file or from value.
  #         If set to false, no secrets will be automatically generated. In this case, secretName must
  #         be set to an existing secret containering the sss keytab
  #     - secretName: Name of the secret containing the sss keytab
  #     - fromFile: Provide the path to a file containing the eos keytab (defaults to files/eos.keytab)
  #         A secret with name <secretName> will be created from it
  #     - fromValue: Provide the full keytab as a string
  #         Example: "0 u:daemon g:daemon n:eos-test+ N:69275826269580...
  #         A secret with name <secretName> will be created from it
  sssKeytab:
    createSecret: true
    secretName: &sssKeytabName sciencebox-eos-sss-keytab
    #fromFile:
    #fromValue:

#
# Global values
#
global:
  # EOS image tag:
  #   - Used by eos-server (qdb, mq, mgm, fst) (eos-all image)
  #             eos-instance-config (eos-all image)
  #             fusex in SWAN (eos-fusex image)
  tag: 4.8.62

  # SSS keytab:
  #   - Used by eos-server (qdb, mq, mgm, fst) and eos-instance-config
  #   - Anchor for fusex in SWAN
  sssKeytab:
    secret: *sssKeytabName

#
# EOS
#
eos:
  mgm:
    mgmofs:
      instance: user
    ldapBindUsers:
      enable: true
      nslcd:
       config:
         # TODO: ldap_uri should be guessed.
         ldap_uri: ldap://ocis-idp.default.svc.cluster.local:9389
         ldap_base: ou=users,dc=example,dc=org
         ldap_binddn: cn=idp,ou=sysusers,dc=example,dc=org
         ldap_bindpw: idp
         ldap_user_search_base: dc=example,dc=org
         ldap_group_search_base: ou=groups,dc=example,dc=org
         ldap_filter_passwd: (objectClass=posixAccount)
         ldap_filter_group: (objectClass=group)
  fst:
    replicaCount: 4

#
# SWAN
#
swan:
  #
  # CVMFS mounts
  cvmfs:
    deployDaemonSet: &cvmfsDeployDS true
    deployCsiDriver: &cvmfsDeployCSI false
    useCsiDriver: &cvmfsUseCSI false
    repositories: &cvmfsRepos
      - cvmfs-config.cern.ch
      - sft.cern.ch
      - sft-nightlies.cern.ch

  #
  # EOS Fusex mount
  eos:
    deployDaemonSet: &eosDeployDS true
    deployCsiDriver: &eosDeployCSI false
    useCsiDriver: &eosUseCSI false
  fusex:
    fusex:
      keytab:
        secret: *sssKeytabName
      hostMountpoint: /var/eos
      config:
        oauth2: 1
        sss: 0
        # TODO: eos_mgm_alias should be guessed.
        #eos_mgm_alias: "eos-mgm.default.svc.cluster.local"
        eos_mgm_alias: "sciencebox-mgm.default.svc.cluster.local"

  #
  # JupyterHub
  jupyterhub:
    proxy:
      secretToken: 11df35dab7527b3798de5224f06458db1e0526fa65700e81e18f17f89822e0cf
    hub:
      # The default (pvc) is not working in openstack...
      # TODO: Add some persistency here
      db:
        type: sqlite-memory
      extraEnv:
        JUPYTERHUB_CRYPT_KEY: 8b9fa8fc38c56eb4b3194d875924bb27062635b038b75ffbc91d9a6212bd3e55
        # OAUTH2_TLS_VERIFY: "0"  # Accept self-signed/invalid certificate from OCIS IDP
        # TODO: This is not enought. Also the authenticator (and EOS) has to tolerate self-signed/invalid certs
      cookieSecret: 07006b4975f06166c988122e78603740788e93846265b0aec791c387a9a83925
      config:
        SwanKubeSpawner:
          local_home: True
        KeyCloakAuthenticator:
          oidc_issuer:
          client_id:
          # TODO retrieve from app portal
          client_secret:
          # TODO: We should infer pick the url automatically...
          oauth_callback_url:
          scope:
            - openid
            - email
            - profile
            - offline_access
          jwt_signing_algorithms:
            - HS256
            - RS256
            - PS256
          # With the CERN SSO we will get a valid token for EOS. If the eosxd supports oauth,
          # we will be able to use it from the terminal, even with local_home=True.
          # The oCIS idp probably doesn't support exchanging tokens, but we will be able to re-use
          # the swan token with EOS if needed (although we shouldn't)
          exchange_tokens:
          ##   - eos-service
          ##   - cernbox-service
        JupyterHub:
          # We should expose cernbox and swan from the same url to simplify the deployment
          # We can do that by using different base url's for each.
          # I hope this simplifies the ScienceBox ingress as well
          base_url: /swan
      extraConfig:
        # TODO change the config to use the oCIS idp
        # Might need fixes on the swan code cause we break if we don't set user_roles (at least when using GPU).
        00-authConf: |
          def pre_spawn_hook(authenticator, spawner, auth_state):
            spawner.environment['ACCESS_TOKEN'] = auth_state['access_token']
            spawner.environment['OAUTH_INSPECTION_ENDPOINT'] = authenticator.userdata_url.replace('https://', '')
            spawner.user_uid = str(1000) # Fake value -- Nobody uses this.
            decoded_token = authenticator._decode_token(auth_state['access_token'])
            spawner.user_roles = authenticator.claim_roles_key(authenticator, decoded_token)
          c.KeyCloakAuthenticator.pre_spawn_hook = pre_spawn_hook
        02-spawnError: |
          cernbox_url = 'CHANGE_ME' #TODO: This should come from the ScienceBox config !! If necessary, this can come as an env var

          SPAWN_ERROR_MESSAGE = f"""SWAN could not start a session for your user, please try again. If the problem persists, please check:
          <ul>
              <li>Do you have a CERNBox account? If not, click <a href="{cernbox_url}" target="_blank">here</a>.</li>
              <li>Check with the service manager that SWAN is running properly.</li>
          </ul>"""
          c.SpawnHandlersConfigs.spawn_error_message = SPAWN_ERROR_MESSAGE
        03-simpleForm: |
          # Remove this to enable the full form
          c.SwanSpawner.options_form = open('/srv/jupyterhub/jupyterhub_form.html').read()
    singleuser:
      cpu:
        limit: .5
        guarantee: .5
      cvmfs:
        deployDaemonSet: *cvmfsDeployDS
        deployCsiDriver: *cvmfsDeployCSI
        useCsiDriver: *cvmfsUseCSI
        repositories: *cvmfsRepos
      eos:
        deployDaemonSet: *eosDeployDS
        deployCsiDriver: *eosDeployCSI
        useCsiDriver: *eosUseCSI
      extraEnv:
        # The sharing functionality won't work because we are deploying oCIS and not oc10
        # This will be replaced in the future with the CS3 APIs
        # SHARE_CBOX_API_DOMAIN: LOCAL_CBOX_URL__CHANGE_ME
        # SHARE_CBOX_API_BASE: /cernbox/swanapi/v1
        HELP_ENDPOINT: https://raw.githubusercontent.com/swan-cern/help/up2u/
        # FIXME Create a galery for ScienceBox? Or the normal one should redirect to different instances?
        # GALLERY_URL: https://swan-gallery.web.cern.ch/

    # TODO For some reason this is not working... We're still debugging
    prePuller:
      hook:
        enabled: false

    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/ssl-redirect: true
        nginx.ingress.kubernetes.io/force-ssl-redirect: true
        #nginx.ingress.kubernetes.io/rewrite-target: /
        #nginx.ingress.kubernetes.io/secure-backends: "true"
      hosts:
        #- hostname_where_the_ingress_lives
      # tls:
      #   - secretName: swan-tls-cert
      #     hosts:
      #       - diogo-swan.cern.ch

  # To decide if we keep this or we manage the tls secret differently
  # If we keep it, maybe should change the name from swan.secrets.ingress to smth else
  # swan:
  #   secrets:
  #     ingress:
  #       cert:
  #       key:
